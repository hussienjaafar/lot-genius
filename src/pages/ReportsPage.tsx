import React, { useState, useEffect } from "react";

interface Report {
  id: string;
  name: string;
  date: string;
  status: string;
  recommendedBid: number;
  expectedROI: number;
  decision: string;
}

const ReportsPage: React.FC = () => {
  const [reports, setReports] = useState<Report[]>([]);
  const [selectedReport, setSelectedReport] = useState<Report | null>(null);
  const [reportContent, setReportContent] = useState<string>("");

  useEffect(() => {
    const fetchReports = async () => {
      try {
        const response = await fetch("http://localhost:8000/v1/reports");
        if (response.ok) {
          const data = await response.json();
          setReports(data);
        } else {
          // Fallback to mock data if API fails
          setReports([
            {
              id: "1",
              name: "Electronics Lot Analysis",
              date: "2024-01-15",
              status: "Completed",
              recommendedBid: 295.47,
              expectedROI: 2.984,
              decision: "PROCEED",
            },
            {
              id: "2",
              name: "Clothing Lot Assessment",
              date: "2024-01-14",
              status: "Completed",
              recommendedBid: 150.25,
              expectedROI: 1.75,
              decision: "CAUTION",
            },
            {
              id: "3",
              name: "Mixed Goods Analysis",
              date: "2024-01-13",
              status: "Completed",
              recommendedBid: 425.0,
              expectedROI: 3.2,
              decision: "PROCEED",
            },
          ]);
        }
      } catch (error) {
        console.error("Error fetching reports:", error);
        // Use mock data as fallback
        setReports([
          {
            id: "1",
            name: "Electronics Lot Analysis",
            date: "2024-01-15",
            status: "Completed",
            recommendedBid: 295.47,
            expectedROI: 2.984,
            decision: "PROCEED",
          },
        ]);
      }
    };

    fetchReports();
  }, []);

  const loadReportContent = async (report: Report) => {
    setSelectedReport(report);

    try {
      // Try to fetch report content from backend
      const response = await fetch(
        `http://localhost:8000/v1/reports/${report.id}`,
      );
      if (response.ok) {
        const content = await response.text();
        setReportContent(content);
      } else {
        throw new Error("Failed to fetch report content");
      }
    } catch (error) {
      console.error("Error loading report content:", error);

      // Fallback to mock content
      const mockContent = `# Lot Genius Report

## Executive Summary

**Recommended Maximum Bid:** $${report.recommendedBid}
**Expected ROI (P50):** ${report.expectedROI}x
**Probability of Meeting ROI Target:** 95.0%
**Expected 60-day Cash Recovery:** $1,250.00
**Meets All Constraints:** Yes

- ROI Target: **0.20x**
- Risk Threshold: **P(ROI>=target) >= 0.70**

## Lot Overview

- **Total Items:** 5
- **Estimated Total Value (mu):** N/A
- **Estimated Total Value (P50):** N/A
- **Average 60-day Sell Probability:** N/A

## Constraints

- **ROI Target:** 0.20x
- **Risk Threshold:** P(ROI>=target) >= 0.70
- **Cashfloor:** $0.00
- **Payout Lag:** 14 days

## Investment Decision

**${report.decision}** - This lot meets the configured investment criteria.

The recommended bid of $${report.recommendedBid} has a 95.0% probability of achieving the target ROI of 0.2x, which exceeds the Risk Threshold of 0.70.

---

*Generated by Lot Genius Step 9.2*`;

      setReportContent(mockContent);
    }
  };

  const downloadReport = (format: string) => {
    if (!selectedReport) return;

    const blob = new Blob([reportContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${selectedReport.name.replace(/\s+/g, "_")}.${format}`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="reports-page">
      <div className="page-header">
        <h1>Reports Dashboard</h1>
        <p>View and manage your lot analysis reports</p>
      </div>

      <div className="reports-layout">
        <div className="reports-list">
          <h2>Recent Reports</h2>

          {reports.map((report) => (
            <div
              key={report.id}
              className={`report-item ${selectedReport?.id === report.id ? "selected" : ""}`}
              onClick={() => loadReportContent(report)}
            >
              <div className="report-header">
                <h3>{report.name}</h3>
                <span className={`status ${report.status.toLowerCase()}`}>
                  {report.status}
                </span>
              </div>

              <div className="report-meta">
                <span>Date: {report.date}</span>
              </div>

              <div className="report-summary">
                <div className="metric">
                  <span>Bid: ${report.recommendedBid}</span>
                </div>
                <div className="metric">
                  <span>ROI: {report.expectedROI}x</span>
                </div>
                <div className={`decision ${report.decision.toLowerCase()}`}>
                  {report.decision}
                </div>
              </div>
            </div>
          ))}

          {reports.length === 0 && (
            <div className="empty-state">
              <p>
                No reports available. Process a lot to generate your first
                report.
              </p>
              <a href="/pipeline" className="btn btn-primary">
                Start Processing
              </a>
            </div>
          )}
        </div>

        <div className="report-viewer">
          {selectedReport ? (
            <div>
              <div className="report-toolbar">
                <h2>{selectedReport.name}</h2>
                <div className="toolbar-actions">
                  <button
                    className="btn btn-secondary"
                    onClick={() => downloadReport("md")}
                  >
                    Download Markdown
                  </button>
                  <button
                    className="btn btn-secondary"
                    onClick={() => downloadReport("html")}
                  >
                    Download HTML
                  </button>
                </div>
              </div>

              <div className="report-content">
                <pre>{reportContent}</pre>
              </div>
            </div>
          ) : (
            <div className="report-placeholder">
              <p>Select a report from the list to view its contents</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ReportsPage;
